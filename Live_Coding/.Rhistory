help("rexp")
hist(rexp(1000))
par(mfrow = c(1,2))
hist(rexp(1000))
hist(rexp(1000), col = rgb(1, 0, 0, 1/2),
main = "Exponential Distribution",
xlab = "")
#set grid
par(mfrow = c(1,2))
#Exponential
hist(rexp(1000), col = rgb(1, 0, 0, 1/2),
main = "Exponential Distribution",
xlab = "")
#transformed Uniform
hist(-log(1 - runif(1000)), col = rgb(0, 1, 0, 1/2),
main = "-ln(1 - U)", xlab = "")
#generate the r.v., an Expo(1)
X = rexp(1000, 1)
#plot F(X)
hist(pexp(X, 1), col = rgb(0, 0, 1, 1/2),
main = "F(X)", xlab = "")
help("pexp")
#68-95-99.7 Rule
pnorm(1) - pnorm(-1); pnorm(2) - pnorm(-2); pnorm(3) - pnorm(-3)
#plot the CDF
plot(seq(from = -3, to = 3, length.out = 20), pnorm(seq(from = -3, to = 3, length.out = 20)),
xlab = "x", ylab = "P(X <= x)", main = "CDF of X where X ~ N(0, 1)",
type = "p", pch = 16)
X = [1,2,3,4,5,6]
X = c(1,2,3,4,5,6)
X
X[X>3]
#replicate
set.seed(110)
sims = 1000
#define simple parameters (n, p for binomial and geometric) and value of k
n = 10
lambda = 1/10
mu = 3
sigma = 1
k = 5
#generate the r.v.s
X = rexp(sims, lambda)
Y = rnorm(sims, mu, sigma)
#graphics
#set graphic grid
par(mfrow = c(2,2))
#overall histogram
hist(X, main = "X ~ Expo(lambda)", xlab = "", freq = FALSE,
col = rgb(1, 0, 0, 1/4))
#condition
hist(X[X > k] - k, main = "(X - k)|X > k", freq = FALSE,
xlab = "", col = rgb(1, 0, 0, 1/4))
#overall histogram
hist(Y, main = "Y ~ N(mu, sigma^2)", xlab = "", freq = FALSE,
col = rgb(0, 1, 0, 1/4))
#condition
hist(Y[Y > k] - k, main = "(Y- k)|Y > k", freq = FALSE,
xlab = "", col = rgb(0, 1, 0, 1/4))
US.communities = 38000
home.medianprice = 350000
marketing.percent = 0.01
profit.percent = 0.05
US.communities = 38000
home.medianprice = 350000
marketing.percent = 0.01
profit.percent = 0.05
US.communities = 38000
home.medianprice = 350000
marketing.percent = 0.01
profit.percent = 0.05
US.communities = 38000
home.medianprice = 350000
marketing.percent = 0.01
profit.percent = 0.05
counts <- table(PPL.communities, PPC.communities)
# Communities Affected under PPL
PPL.communities
# Pricing options for a flat price per Community or per Lead Received
community.month.price = 400
lead.price = 40
# Zillow's collected data
zillow.communities = 6174
zillow.deliveredleads = 4
# Collected Data
us.communities = 38000
home.medianprice = 350000
marketing.percent = 0.01
profit.percent = 0.05
# Expected Data
leadsgrowth.2018mom = 0.05
leadsgrowth.2017mom = 0.04
leadsgrowth.2016mom = 0.01
# Community growth for expected growth of New Construction
# communities advertising for the Price Per Lead model.
communitygrowth.2018ppl = 0.06
communitygrowth.2017ppl = 0.04
communitygrowth.2016ppl = 0.02
# The high cancelletion rate discounting such that the Community Month-Over-Month
# growth rate will be only 90\% that of the Price per Lead model
discount.percent = 0.90
# Community growth for expected growth of New Construction
# communities advertising for the Price Per Community model.
communitygrowth.2018ppc = discount.percent * communitygrowth.2018ppl
communitygrowth.2017ppc = discount.percent * communitygrowth.2017ppl
communitygrowth.2016ppc = discount.percent * communitygrowth.2016ppl
# Finally, let's verify that R was able to correctly multiply our values
# by comparing these values to the table
communitygrowth.2018ppc
communitygrowth.2017ppc
communitygrowth.2016ppc
months = 12
years = c(2016,2017,2018)
# Set the communities vector to store 3 years of communities advertised
PPL.communities = rep(NA, 3)
PPC.communities = rep(NA, 3)
# 2016
PPC.communities[1] = zillow.communities * (1+communitygrowth.2016ppc)^months
PPL.communities[1] = zillow.communities * (1+communitygrowth.2016ppl)^months
# 2017
PPC.communities[2] = PPL.communities[1] * (1+communitygrowth.2017ppc)^months
PPL.communities[2] = PPL.communities[1] * (1+communitygrowth.2017ppl)^months
# 2018
PPC.communities[3] = PPL.communities[2] * (1+communitygrowth.2018ppc)^months
PPL.communities[3] = PPL.communities[2] * (1+communitygrowth.2018ppl)^months
counts <- table(PPL.communities, PPC.communities)
counts
barplot(counts, main="Affected Communities",
xlab="Years", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
counts <- table(PPL.communities, PPC.communities,dnn=c("PPL", "PPC"))
counts
barplot(counts, main="Affected Communities",
xlab="Years", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
data <- structure(list(PPL.communities, PPC.communities), .Names = c("PPL affected communities", "PPC affected communities"), class = "data.frame")
counts <- table(PPL.communities, PPC.communities)
counts
barplot(as.matrix(data))
data <- structure(list(PPL.communities, PPC.communities), .Names = c("PPL affected communities", "PPC affected communities"), class = "data.frame")
#counts <- table(PPL.communities, PPC.communities)
#counts
barplot(as.matrix(data))
data <- structure(list(PPL.communities, PPC.communities), .Names = c("PPL affected communities", "PPC affected communities"), class = "data.frame")
data
#counts <- table(PPL.communities, PPC.communities)
#counts
barplot(as.matrix(data))
PPL.communities > PPC.communities
len(PPL.communities > PPC.communities) / 3
counts <- table(PPL.communities, PPC.communities)
barplot(counts, main="Affected Communities",
xlab="Years", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
counts <- table(PPL.communities; PPC.communities)
barplot(list(PPL.communities, PPC.communities), main="Affected Communities",
xlab="Years", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
barplot(PPL.communities, PPC.communities, main="Affected Communities",
xlab="Years", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
barplot(PPL.communities, PPC.communities, main="Affected Communities",
xlab="Years",
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
barplot(PPL.communities, main="Affected Communities",
xlab="Years",
legend = rownames(counts), beside=TRUE,
names.arg=c("2016", "2017", "2018"))
barplot(PPL.communities, main="Affected Communities in PPL",
xlab="Years",
names.arg=c("2016", "2017", "2018"))
barplot(PPL.communities, main="Affected Communities in PPC",
xlab="Years",
names.arg=c("2016", "2017", "2018"))
PPL.communities > PPC.communities
PPL.communities > PPC.communities
months = 12
years = c(2016,2017,2018)
# Set the communities vector to store 3 years of communities advertised
PPL.quantity = rep(NA, 3)
# 2016
PPL.quantity[1] = lead.quantity * (1+communitygrowth.2016ppl)^months
# Pricing options for a flat price per Community or per Lead Received
community.month.price = 400
lead.price = 40
# Zillow's collected data
zillow.communities = 6174
zillow.deliveredleads = 4
# Collected Data
us.communities = 38000
home.medianprice = 350000
marketing.percent = 0.01
profit.percent = 0.05
# Expected Data
leadsgrowth.2018mom = 0.05
leadsgrowth.2017mom = 0.04
leadsgrowth.2016mom = 0.01
# Community growth for expected growth of New Construction
# communities advertising for the Price Per Lead model.
communitygrowth.2018ppl = 0.06
communitygrowth.2017ppl = 0.04
communitygrowth.2016ppl = 0.02
# The high cancelletion rate discounting such that the Community Month-Over-Month
# growth rate will be only 90\% that of the Price per Lead model
discount.percent = 0.90
# Community growth for expected growth of New Construction
# communities advertising for the Price Per Community model.
communitygrowth.2018ppc = discount.percent * communitygrowth.2018ppl
communitygrowth.2017ppc = discount.percent * communitygrowth.2017ppl
communitygrowth.2016ppc = discount.percent * communitygrowth.2016ppl
# Finally, let's verify that R was able to correctly multiply our values
# by comparing these values to the table
communitygrowth.2018ppc
communitygrowth.2017ppc
communitygrowth.2016ppc
months = 12
years = c(2016,2017,2018)
# Set the communities vector to store 3 years of communities advertised
PPL.communities = rep(NA, 3)
PPC.communities = rep(NA, 3)
# 2016
PPC.communities[1] = zillow.communities * (1+communitygrowth.2016ppc)^months
PPL.communities[1] = zillow.communities * (1+communitygrowth.2016ppl)^months
# 2017
PPC.communities[2] = PPL.communities[1] * (1+communitygrowth.2017ppc)^months
PPL.communities[2] = PPL.communities[1] * (1+communitygrowth.2017ppl)^months
# 2018
PPC.communities[3] = PPL.communities[2] * (1+communitygrowth.2018ppc)^months
PPL.communities[3] = PPL.communities[2] * (1+communitygrowth.2018ppl)^months
# Communities Affected under PPL
PPL.communities
# Communities Affected under PPC
PPC.communities
barplot(PPL.communities, main="Affected Communities in PPL",
xlab="Years",
names.arg=c("2016", "2017", "2018"), col = "blue")
barplot(PPC.communities, main="Affected Communities in PPC",
xlab="Years",
names.arg=c("2016", "2017", "2018"), col = "red")
barplot(PPL.communities - PPC.communities, main="Difference in Affected Communities of PPL - PPC",
xlab="Years",
names.arg=c("2016", "2017", "2018"), col = "purple")
PPL.communities > PPC.communities
# Find the current quantity of leads per year
months = 12
lead.quantity = zillow.communities * zillow.deliveredleads * months
help(cor)
cor(X,Y)
X = c(0,1,-1,-1,-1)
Y = c(0,-1,1,1,0)
cor(X,Y)
X = c(0,1,-1,-1,-1)
Y = c(0,-1,1,1,0)
cor(X,Y)
X = c(0,1,-1,-1,-1)
Y = c(0,-1,1,1,0)
cov(X,Y)/(sd(X)*sd(Y))
